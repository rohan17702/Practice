    int FirstOcc(vector<int>& arr , int n , int key){
        int start = 0 , end = n - 1 ;
    int mid = start + (end - start) / 2 ;
    int ans = -1 ;

        while(start <= end){
            if(arr[mid] == key){
                ans = mid ;
                end = mid - 1 ;
            }
            else if(arr[mid] < key){
                start = mid + 1 ;
            }
            else{
                end = mid - 1 ;
            }
            mid = start + (end - start) / 2 ;
        } 
        return ans;
    }

    int LastOcc(vector<int>& arr , int n , int key){
        int start = 0 , end = n - 1 ;
    int mid = start + (end - start) / 2 ;
    int ans = -1 ;

        while(start <= end){
            if(arr[mid] == key){
                ans = mid ;
                start = mid + 1 ;
            }
            else if(arr[mid] < key){
                start = mid + 1 ;
            }
            else{
                end = mid - 1 ;
            }
            mid = start + (end - start) / 2 ;
        } 
        return ans;
    }

pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
{
    pair<int , int> p;
    p.first = FirstOcc(arr, n, k);
    p.second = LastOcc(arr, n, k);
    return p ;
}
